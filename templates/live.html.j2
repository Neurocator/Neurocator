{% extends "base.html.j2" %}

{% block body %}
<h1>Lecture Tracker</h1>
<form id="pointsForm">
    <div>
        <label for="points">Enter points to detect (one per line):</label><br>
        <textarea name="points" id="points" rows="10" cols="50"></textarea>
    </div>
    <div>
        <button type="submit">Submit Points</button>
    </div>
</form>
<ul id="bulletPoints" class="bullet-points-list"></ul>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('pointsForm');
        form.addEventListener('submit', (event) => {
            event.preventDefault();
            const pointsTextarea = document.getElementById('points');
            const points = pointsTextarea.value.split('\n').map(point => ({ text: point.trim(), covered: false }));
            
            // Render the points as bullet points
            const bulletPointsList = document.getElementById('bulletPoints');
            bulletPointsList.innerHTML = '';
            points.forEach((point, index) => {
                const pointItem = document.createElement('li');
                pointItem.className = 'bullet-point';
                pointItem.id = `point${index}`;
                pointItem.textContent = point.text;
                bulletPointsList.appendChild(pointItem);
            });

            startRecognition(points);
        });

        function startRecognition(points) {
            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.interimResults = false;
            recognition.maxAlternatives = 1;

            recognition.onstart = () => {
                console.log('Speech recognition started');
            };

            recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript.toLowerCase();
                console.log('Transcript:', transcript);
                fetch('/transcribe', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ transcript, points })
                })
                .then(response => response.json())
                .then(data => {
                    data.forEach((point, index) => {
                        if (point.covered) {
                            document.getElementById(`point${index}`).classList.add('crossed-off');
                        }
                    });
                });
            };

            recognition.onerror = (event) => {
                console.error('Speech recognition error', event);
            };

            recognition.onend = () => {
                console.log('Speech recognition ended');
                recognition.start();
            };

            recognition.start();
        }
    });
</script>
<style>
    .bullet-points-list {
        list-style-type: disc;
        padding-left: 20px;
        border: 1px solid #ccc;
        margin-top: 20px;
        padding: 10px;
    }
    .bullet-point {
        margin-bottom: 5px;
    }
    .crossed-off {
        text-decoration: line-through;
    }
</style>
{% endblock %}