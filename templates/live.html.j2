{% extends "base.html.j2" %}

{% block body %}
<div class="container" id="mainContainer">
    <h1>Lecture Tracker</h1>

    <div class="input-container">
        <input type="text" id="mainPointInput" class="input-box" placeholder="Enter main point">
        <button id="addMainPointBtn" class="btn btn-add">ADD MAIN POINT</button>
    </div>

    <div class="list-container">
        <ul id="bulletPoints" class="bullet-points-list"></ul>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const mainPointInput = document.getElementById('mainPointInput');
        const addMainPointBtn = document.getElementById('addMainPointBtn');
        const bulletPointsList = document.getElementById('bulletPoints');
        
        let points = [];

        addMainPointBtn.addEventListener('click', () => {
            const mainPointText = mainPointInput.value.trim();

            if (mainPointText) {
                const mainPoint = { text: mainPointText, subpoints: [], covered: false };
                points.push(mainPoint);
                renderPoints();
            }

            mainPointInput.value = '';
        });

        function renderPoints() {
            bulletPointsList.innerHTML = '';
            points.forEach((mainPoint, mainIndex) => {
                const mainPointItem = document.createElement('li');
                mainPointItem.className = 'bullet-point main-point';
                mainPointItem.id = `mainPoint${mainIndex}`;
                mainPointItem.innerHTML = `
                    ${mainPoint.text} 
                    <button class="add-subpoint-btn" data-index="${mainIndex}">+</button>
                    <span class="delete-btn" data-index="${mainIndex}">üóëÔ∏è</span>
                    <input type="text" class="input-box subpoint-input" placeholder="Enter subpoint" data-index="${mainIndex}" style="display:none;">
                `;
                bulletPointsList.appendChild(mainPointItem);

                if (mainPoint.subpoints.length > 0) {
                    const subpointsList = document.createElement('ul');
                    subpointsList.className = 'subpoints-list';
                    mainPoint.subpoints.forEach((subpoint, subIndex) => {
                        const subpointItem = document.createElement('li');
                        subpointItem.className = 'bullet-point subpoint';
                        subpointItem.id = `mainPoint${mainIndex}_subpoint${subIndex}`;
                        subpointItem.innerHTML = `${subpoint.text} <span class="delete-btn" data-main-index="${mainIndex}" data-sub-index="${subIndex}">üóëÔ∏è</span>`;
                        subpointsList.appendChild(subpointItem);
                    });
                    bulletPointsList.appendChild(subpointsList);
                }
            });

            document.querySelectorAll('.add-subpoint-btn').forEach(btn => {
                btn.addEventListener('click', (event) => {
                    const mainIndex = btn.getAttribute('data-index');
                    const subpointInput = document.querySelector(`.subpoint-input[data-index="${mainIndex}"]`);
                    subpointInput.style.display = 'inline-block';
                    subpointInput.focus();
                });
            });

            document.querySelectorAll('.subpoint-input').forEach(input => {
                input.addEventListener('keydown', (event) => {
                    if (event.key === 'Enter') {
                        const mainIndex = input.getAttribute('data-index');
                        const subpointText = input.value.trim();
                        if (subpointText) {
                            points[mainIndex].subpoints.push({ text: subpointText, covered: false });
                            renderPoints();
                        }
                        input.value = '';
                        input.style.display = 'none';
                    }
                });
            });

            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', (event) => {
                    const mainIndex = btn.getAttribute('data-index');
                    const subIndex = btn.getAttribute('data-sub-index');

                    if (subIndex === null) {
                        points.splice(mainIndex, 1);
                    } else {
                        points[mainIndex].subpoints.splice(subIndex, 1);
                    }

                    renderPoints();
                });
            });
        }

        // Speech Recognition Implementation
        function startRecognition() {
            if (!('webkitSpeechRecognition' in window)) {
                alert("Your browser doesn't support Speech Recognition.");
                return;
            }
            
            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.interimResults = false;
            recognition.maxAlternatives = 1;

            recognition.onstart = () => {
                console.log('Speech recognition started');
            };

            recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript.toLowerCase();
                console.log('Transcript:', transcript);
                fetch('/transcribe', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ transcript, points })
                })
                .then(response => response.json())
                .then(data => {
                    data.forEach((point, mainIndex) => {
                        if (point.covered) {
                            document.getElementById(`mainPoint${mainIndex}`).classList.add('crossed-off');
                        } else {
                            document.getElementById(`mainPoint${mainIndex}`).classList.remove('crossed-off');
                        }
                        point.subpoints.forEach((subpoint, subIndex) => {
                            const subpointElement = document.getElementById(`mainPoint${mainIndex}_subpoint${subIndex}`);
                            if (subpoint.covered) {
                                subpointElement.classList.add('crossed-off');
                            } else {
                                subpointElement.classList.remove('crossed-off');
                            }
                        });
                    });
                });
            };

            recognition.onerror = (event) => {
                console.error('Speech recognition error:', event);
                if (event.error === 'no-speech') {
                    console.log('No speech detected. Please try again.');
                }
            };

            recognition.onend = () => {
                console.log('Speech recognition ended');
                // Restart the recognition to continue listening
                setTimeout(() => {
                    recognition.start();
                }, 1000); // Adding a slight delay to avoid rapid restarts
            };

            recognition.start();
        }

        // Initialize Speech Recognition
        startRecognition();
    });
</script>

<style>
    body {
        background-color: #FFF6EA;
        color: black;
        font-family: Arial, sans-serif;
    }
    .container {
        max-width: 600px;
        margin: 50px auto;
        padding: 20px;
        border-radius: 10px;
        background-color: #B0D39B;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    h1 {
        text-align: center;
        margin-bottom: 20px;
        color: white;
    }
    .input-container {
        display: flex;
        width: 100%;
        margin-bottom: 20px;
    }
    .input-box {
        flex: 1;
        padding: 10px;
        margin-right: 10px;
        border: none;
        border-radius: 5px;
        background-color: white;
        color: black;
        font-size: 16px;
    }
    .input-box::placeholder {
        color: #aaa;
    }
    .btn-add {
        padding: 10px 20px;
        background-color: #42a5f5;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        color: white;
    }
    .btn-add:hover {
        background-color: #1e88e5;
    }
    .list-container {
        width: 100%;
        text-align: center;
    }
    .bullet-points-list {
        list-style: disc;
        padding-left: 20px;
        margin: 0 auto;
        display: inline-block;
        text-align: left;
    }
    .bullet-point {
        display: flex;
        align-items: center;
        background-color: #673ab7;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        color: white;
    }
    .bullet-point .delete-btn {
        margin-left: auto;
        cursor: pointer;
    }
    .bullet-point .add-subpoint-btn {
        margin-left: 10px;
        cursor: pointer;
        background: none;
        border: none;
        color: white;
        font-size: 18px;
    }
    .subpoints-list {
        list-style: circle;
        padding-left: 20px;
    }
    .subpoint {
        background-color: #9575cd;
        margin-top: 5px;
    }
    .crossed-off {
        text-decoration: line-through;
        color: #a9a9a9;
    }
    .subpoint-input {
        margin-top: 10px;
    }
</style>
{% endblock %}